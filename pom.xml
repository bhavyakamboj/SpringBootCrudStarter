<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!--spring-boot-starter-parent
		All Spring Boot projects typically use spring-boot-starter-parent as the parent in pom.xml.
			<parent>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-parent</artifactId>
				<version>2.0.4.RELEASE</version>
			</parent>

		The spring-boot-starter-parent  allow you to manage the following things for multiple child projects and modules:
		~Configuration - Java Version and Other Properties
		~Dependency Management - Version of dependencies
		~Default Plugin Configuration
		~Easy Dependency Management(Spring boot magic)
	-->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.5.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.bhavyakamboj</groupId>
	<artifactId>springbootcrudrest</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>springbootcrudrest</name>
	<description>Spring Boot 2 Hibernate 5 MySQL CRUD REST API Tutorial</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<!--Spring Boot Maven plugin
	The Spring Boot Maven plugin provides many convenient features:
	~It collects all the jars on the classpath and builds a single, runnable "über-jar",
	which makes it more convenient to execute and transport your service.
	~It searches for the public static void main() method to flag as a runnable class.
	~It provides a built-in dependency resolver that sets the version number to match Spring Boot
	dependencies. You can override any version you wish, but it will default to Boot’s chosen set of versions.
	-->
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
<!--




We added the spring-boot-starter-web dependency, it will by default pull all the commonly used libraries
 while developing Spring MVC applications, such as spring-webmvc, jackson-json, validation-api, and Tomcat.
We added the spring-boot-starter-data-jpa dependency. This pulls all the spring-data-jpa dependencies
 and adds Hibernate libraries because most applications use Hibernate as a JPA implementation.

~~Autoconfiguration(Spring boot magic)
Not only does the spring-boot-starter-web add all these libraries but it also configures the commonly
 registered beans like DispatcherServlet, ResourceHandlers, MessageSource, etc. with sensible defaults.
We haven’t defined any of the DataSource, EntityManagerFactory, or TransactionManager beans, but they are
 automatically created. How? If you have any in-memory database drivers like H2 or HSQL in the classpath,
  then Spring Boot will automatically create an in-memory data source and will register the EntityManagerFactory
   and TransactionManager beans automatically with sensible defaults. But you are using MySQL, so you need to
    explicitly provide MySQL connection details.
You have configured those MySQL connection details in the application.properties file and Spring Boot creates
 a DataSource using those properties.

~~Embedded Servlet Container Support(Spring boot feature)
We added spring-boot-starter-web, which pulls spring-boot-starter-tomcat automatically. When we run the main()
 method, it starts tomcat as an embedded container so that we don’t have to deploy our application on any
  externally installed tomcat server.

What if we want to use a Jetty server instead of Tomcat? You simply exclude spring-boot-starter-tomcat from
 spring-boot-starter-web and include spring-boot- starter-jetty. That’s it.

~~resources/
This directory, as the name suggests, is dedicated to all the static resources, templates and property files.
resources/static - contains static resources such as CSS, js, and images.
resources/templates - contains server-side templates which are rendered by Spring.
resources/application.properties - This file is very important. It contains application-wide properties.
 Spring reads the properties defined in this file to configure your application. You can define a server’s default port,
  server’s context path, database URLs etc, in this file.
-->